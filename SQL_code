CREATE TABLE IF NOT EXISTS manufacturers (
    manufacturer_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(45) NOT NULL,
    country VARCHAR(45) NOT NULL
);

CREATE TABLE IF NOT EXISTS products (
    product_id INT PRIMARY KEY AUTO_INCREMENT,
    manufacturer_id INT NOT NULL,
    model VARCHAR(45) NOT NULL,
    price DECIMAL NOT NULL,
    horsepower INT NOT NULL,
    fuel_efficiency INT NOT NULL,
    FOREIGN KEY (manufacturer_id) REFERENCES manufacturers (manufacturer_id)
);

CREATE TABLE IF NOT EXISTS inventory (
    product_id INT PRIMARY KEY,
    quantity INT NOT NULL,
    reorder_level INT NOT NULL DEFAULT 2,
    last_inventory_date DATE NOT NULL,
    FOREIGN KEY (product_id) REFERENCES products (product_id)    
);

CREATE TRIGGER update_inventory
AFTER INSERT ON sales 
FOR EACH ROW 
BEGIN
    UPDATE inventory
    SET quantity = quantity - NEW.quantity,
    last_inventory_date = NEW.sale_date
    where product_id = NEW.product_id;
END;

INSERT INTO sales (sale_date, customer_id, product_id, employee_id, quantity, total_price) 
VALUES
    (DATE('2023-05-01'), 1, 1, 1, 2, 56000.00),
    (DATE('2023-05-02'), 2, 2, 1, 1, 22000.00),
    (DATE('2023-05-02'), 1, 3, 2, 1, 41250.00),
    (DATE('2023-05-03'), 2, 4, 2, 2, 60000.00),
    (DATE('2023-05-03'), 1, 1, 2, 3, 84000.00);

SELECT * FROM inventory;

CREATE INDEX customer_sales_product
ON sales(customer_id, product_id);

CREATE VIEW sales_summary AS
SELECT pr.model AS model,
SUM(s.quantity) AS total_sold
FROM sales AS s 
JOIN products AS pr ON s.product_id = pr.product_id
GROUP BY pr.model;

SELECT * FROM sales_summary;

WITH temp AS 
(SELECT employee_id, (SUM(quantity) / SUM(SUM(quantity)) OVER()) * 100 AS sales_percentage, 
    DATE_FORMAT(sale_date, '%M %Y') AS month_year 
FROM sales
GROUP BY employee_id, month_year),
temp2 AS (SELECT employee_id, month_year, 
CASE 
        WHEN sales_percentage < 5 THEN 0
        WHEN sales_percentage >= 5 AND sales_percentage < 10 THEN 2000
        WHEN sales_percentage >= 10 AND sales_percentage < 20 THEN 5000
        WHEN sales_percentage >= 20 AND sales_percentage < 30 THEN 10000
        WHEN sales_percentage >= 30 AND sales_percentage < 40 THEN 15000
        ELSE 25000
    END AS employee_bonus
FROM temp
GROUP BY employee_id, month_year, employee_bonus)
SELECT CONCAT(e.first_name, ' ', e.last_name) AS employee_name, position, month_year, employee_bonus 
FROM employees AS e
JOIN temp2 as t ON e.employee_id = t.employee_id 
WHERE e.position = 'Sales Associate';

WITH temp AS
(SELECT p.product_id AS id, model, price, SUM(s.total_price) AS total_sale_per_model, 
    i.quantity AS inventory_per_model, SUM(s.total_price) / i.quantity AS sales_inventory_ratio
FROM products AS p 
JOIN sales AS s ON p.product_id = s.product_id
JOIN inventory AS i ON p.product_id = i.product_id
GROUP BY p.product_id, p.model, price, i.quantity)    
SELECT model, price, total_sale_per_model, 
    inventory_per_model, sales_inventory_ratio
FROM temp
ORDER BY sales_inventory_ratio DESC;
